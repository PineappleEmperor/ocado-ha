name: Check Manifest Version Bump

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write  # Required to comment on PRs

jobs:
  check_version_bump:
    name: Ensure version is updated in manifest.json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get base branch
        run: echo "BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV

      - name: Checkout base manifest.json
        run: |
          git fetch origin $BASE_REF
          git show origin/$BASE_REF:custom_components/ocado/manifest.json > ../manifest_base.json
          
      - name: Compare manifest versions
        id: compare
        run: |
          BASE_VERSION=$(jq -r '.version' ../manifest_base.json)
          PR_VERSION=$(jq -r '.version' custom_components/ocado/manifest.json)

          echo "Base version: $BASE_VERSION"
          echo "PR version: $PR_VERSION"

          if [ "$BASE_VERSION" == "$CURRENT_VERSION" ]; then
            echo "unchanged=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "unchanged=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine bump type from PR labels
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name')

          BUMP=""

          if echo "$LABELS" | grep -qi '!feat'; then
            BUMP="breaking feature"
          elif echo "$LABELS" | grep -qi '!feature'; then
            BUMP="breaking feature"
          elif echo "$LABELS" | grep -qi 'feat'; then
            BUMP="feature"
          elif echo "$LABELS" | grep -qi 'feature'; then
            BUMP="feature"
          elif echo "$LABELS" | grep -qi 'fix'; then
            BUMP="fix"
          elif echo "$LABELS" | grep -qi 'patch'; then
            BUMP="patch"
          elif echo "$LABELS" | grep -qi 'fix'; then
            BUMP="patch"
          elif echo "$LABELS" | grep -qi 'chore'; then
            BUMP="patch"
          else
            BUMP="none"
          fi

          if [ "$BUMP" = "breaking feature" ]; then
            EXPECTED_VERSION="v$((MAJOR+1)).0.0"
          elif [ "$BUMP" = "feature" ]; then
            EXPECTED_VERSION="v$MAJOR.$((MINOR+1)).0"
          elif [ "$BUMP" = "fix" ]; then
            EXPECTED_VERSION="v$MAJOR.$((MINOR+1)).0"
          elif [ "$BUMP" = "patch" ]; then
            EXPECTED_VERSION="v$MAJOR.$MINOR.$((PATCH+1))"
          else
            EXPECTED_VERSION=""
          fi

          echo "RECOMMENDED_BUMP=$BUMP" >> $GITHUB_OUTPUT
          echo "SUGGESTED_VERSION=$EXPECTED_VERSION" >> $GITHUB_OUTPUT

      - name: Comment on PR if version unchanged
        if: steps.compare.outputs.unchanged == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BUMP_TYPE="${{ steps.bump.outputs.RECOMMENDED_BUMP }}"
          NEW_VERSION="${{ steps.bump.outputs.SUGGESTED_VERSION }}"
          MSG="‚ö†Ô∏è **Version in \`custom_components/ocado/manifest.json\` has not been updated.**

          Please update the \`version\` field according to [Semantic Versioning](https://semver.org/)."

          if [ "$BUMP_TYPE" != "none" ]; then
            MSG+="\n\nüîç Based on the PR labels, a **$BUMP_TYPE** version bump is recommended."
            MSG+="\nüí° Suggested new version: \`$NEW_VERSION\`"
          else
            MSG+="\n\nüí° No \`breaking feature\`, \`feature\`, or \`fix\` label was found ‚Äî please add one to indicate the type of change."
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body "$MSG"

      - name: Comment if version number is incorrect
        if: steps.bump.outputs.expected_version != format('v{0}', steps.versions.outputs.pr_version)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BUMP_TYPE="${{ steps.bump.outputs.RECOMMENDED_BUMP }}"
          NEW_VERSION="${{ steps.bump.outputs.SUGGESTED_VERSION }}"
          MSG="‚ö†Ô∏è **Version in \`custom_components/ocado/manifest.json\` seems incorrect.**

          Please update the \`version\` field according to [Semantic Versioning](https://semver.org/)."

          if [ "$BUMP_TYPE" != "none" ]; then
            MSG+="\n\nüîç Based on the PR labels, a **$BUMP_TYPE** version bump is recommended."
            MSG+="\nüí° Suggested new version: \`$NEW_VERSION\`"
          else
            MSG+="\n\nüí° No \`breaking feature\`, \`feature\`, or \`fix\` label was found ‚Äî please add one to indicate the type of change."
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body "$MSG"
